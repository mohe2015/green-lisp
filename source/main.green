;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-

(load "/home/moritz/Documents/green-lisp/source/computer-architecture/avr.green")

(defpackage :main
  (:use :common-lisp)
  (:import-from :bits :file->bit-reader :bit-writer :bit-writer->bytes :bit-writer->file)
  (:shadowing-import-from :logger :log)
  (:import-from :avr :read-instruction :write-instruction :read-any-instruction
		:+DDRB+ :+PORTB+ :+DDRE+ :+PORTE+))
(in-package :main)

(let ((o (make-instance 'bit-writer)))
  (loop repeat 35 collect
       (write-instruction :jmp o (ash #x8c -1)))

  (write-instruction :ldi o (- 24 16) #|r|# #x80)
  (write-instruction :out o 24 #|r|# +DDRB+) ;; TODO FIXME order and enforce types
  (write-instruction :out o 24 #|r|# +PORTB+)

  (write-instruction :ldi o (- 24 16) #|r|# #xFF)
  (write-instruction :out o 24 #|r|# +DDRE+)
  (write-instruction :out o 24 #|r|# +PORTE+)

  (write-instruction :jmp o (ash #x98 -1))

  (bit-writer->file o "test.bin"))


(let ((i (file->bit-reader #P"/home/moritz/Documents/green-lisp/binary.bin")))
  (loop repeat 30 do (read-any-instruction i)))
