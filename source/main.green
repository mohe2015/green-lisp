;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-
;;;; green-lisp - an eco-friendly lisp
;;;; Copyright (C) 2019 Moritz Hedtke <Moritz.Hedtke@t-online.de>
;;;;
;;;; This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

(require 'asdf)
(load "/home/moritz/Documents/green-lisp/source/computer-architecture/avr.green")

(defpackage :main
  (:use :common-lisp)
  (:import-from :bits :file->bit-reader :bit-writer :bit-writer->bytes :bit-writer->file)
  (:shadowing-import-from :logger :log)
  (:import-from :avr :read-instruction :write-instruction :read-any-instruction :instruction-size
		:+DDRB+ :+PORTB+ :+DDRC+ :+PORTC+ :+DDRE+ :+PORTE+

		:label :jmp :ldi :out :rjmp :brcc :adc))
(in-package :main)

(defparameter *program*
  `(
    ,@(loop repeat 35 collect
	   `(jmp :entry0))

      (label :entry0)
      
      ;; some general outputs
      (ldi 24 #x80)
      (out +DDRB+ 24) ;; TODO FIXME enforce types
      (out +PORTB+ 24)
      
      (label :main)
      ;; red
      (ldi 24 #xF0)
      (out +DDRE+ 24)
      (out +PORTE+ 24)
      
      ;; green
      (ldi 24 #x0F)
      (out +DDRC+ 24)
      (out +PORTC+ 24)
      
      ;; defun delay
      ;; constant numbers
      (ldi 20 #x00)
      (ldi 21 #x01)
      
      (ldi 22 #x00)
      (ldi 23 #x00)
      (ldi 24 #x00)
      
      (label :target1)
      (adc 22 21)
      (adc 23 20)
      (adc 24 20)
      (brcc :target1) ;; :target

      ;; red
      (ldi 24 #x0F)
      (out +DDRE+ 24)
      (out +PORTE+ 24)

      ;; green
      (ldi 24 #xF0)
      (out +DDRC+ 24)
      (out +PORTC+ 24)  


      ;; defun delay
      ;; constant numbers
      (ldi 20 #x00)
      (ldi 21 #x01)
      
      (ldi 22 #x00)
      (ldi 23 #x00)
      (ldi 24 #x00)

      (label :target2)
      (adc 22 21)
      (adc 23 20)
      (adc 24 20)
      (brcc :target2)

      (rjmp :main)))

(defparameter *labels* (make-hash-table))

(let ((offset 0))
  (loop for element in *program* do
       (if (eq 'label (car element))
	   (setf (gethash (car (cdr element)) *labels*) offset)
	   (setf offset (+ offset (instruction-size (car element)))))))

(defparameter *bit-writer* (make-instance 'bit-writer))

(defun print-hash-entry (key value)
  (format t "The value associated with the key ~S is ~S~%" key value))

(maphash #'print-hash-entry *labels*)

(loop for element in *program* do
     (unless (eq 'label (car element))
       (if (or (eq 'rjmp (car element)) (eq 'jmp (car element)) (eq 'brcc (car element)))
	   (write-instruction (car element) *bit-writer* (gethash (car (cdr element)) *labels*))
	   (apply #'write-instruction (cons (car element) (cons *bit-writer* (mapcar #'eval (cdr element))))))))

(bit-writer->file *bit-writer* "test.bin")


;;(let ((i (file->bit-reader #P"/home/moritz/Documents/green-lisp/binary.bin")))
;;  (loop repeat 30 do (read-any-instruction i)))

(uiop:run-program "avr-objcopy -I binary -O ihex test.bin test.ihex && avrdude -c stk500v2 -P /dev/ttyACM0 -p atmega128 -B 2 -U flash:w:test.ihex" :output *standard-output* :force-shell t :error-output *standard-output*)
