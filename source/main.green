;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-

(load "/home/moritz/Documents/green-lisp/source/computer-architecture/avr.green")

(defpackage :main
  (:use :common-lisp)
  (:import-from :bits :file->bit-reader :bit-writer :bit-writer->bytes :bit-writer->file)
  (:shadowing-import-from :logger :log)
  (:import-from :avr :read-instruction :write-instruction :read-any-instruction
		:+DDRB+ :+PORTB+ :+DDRC+ :+PORTC+ :+DDRE+ :+PORTE+))
(in-package :main)

(let ((o (make-instance 'bit-writer)))
  (loop repeat 35 collect
       (write-instruction :jmp o (ash #x8c -1)))

  ;; some general outputs
  (write-instruction :ldi o (- 24 16) #|r|# #x80)
  (write-instruction :out o +DDRB+ 24 #|r|#) ;; TODO FIXME order and enforce types
  (write-instruction :out o +PORTB+ 24 #|r|#)

  ;; red
  (write-instruction :ldi o (- 24 16) #|r|# #xFF)
  (write-instruction :out o +DDRE+ 24 #|r|#)
  (write-instruction :out o +PORTE+ 24 #|r|#)

  ;; green
  (write-instruction :ldi o (- 24 16) #|r|# #xFF)
  (write-instruction :out o +DDRC+ 24 #|r|#)
  (write-instruction :out o +PORTC+ 24 #|r|#)  

  (write-instruction :jmp o (ash #x9e -1))

  ;; defun delay
  (write-instruction :ldi o (- 22 16) #x01)
  (write-instruction :ldi o (- 24 16) #x00)
  (write-instruction :ldi o (- 23 16) #x00)
  ;;(label :target)
  ;;(write-instruction :adc o 24 22)
  ;;(write-instruction :adc o 23 22)
  ;;(write-instruction :brcc :target)

  
  
  (bit-writer->file o "test.bin"))

(let ((i (file->bit-reader #P"/home/moritz/Documents/green-lisp/binary.bin")))
  (loop repeat 30 do (read-any-instruction i)))

;;(uiop:run-program "avr-objcopy -I binary -O ihex test.bin test.ihex && avrdude -c stk500v2 -P /dev/ttyACM0 -p atmega128 -B 2 -U flash:w:test.ihex" :output *standard-output* :force-shell t :error-output *standard-output*)
