;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-
;; http://www.gigamonkeys.com/book/files-and-file-io.html chapter 24

(defun file->bytes (filename)
  (with-open-file (in filename :element-type '(unsigned-byte 8))
    (loop for byte = (read-byte in nil) while byte collect byte)))

;; https://lisptips.com/post/44261316742/how-do-i-convert-an-integer-to-a-list-of-bits
(defun byte->bits (byte)
  (let ((bits '()))
    (dotimes (index 8 bits)
      (push (if (logbitp index byte) 1 0) bits))))

(defun bytes->bits (bytes)
  (apply #'concatenate (cons 'list (mapcar #'byte->bits bytes))))

(defun file->bits (filename)
  (bytes->bits (file->bytes filename)))

(defclass bit-reader ()
  ((bits
    :initarg :bits
    :accessor bit-reader-bits
    :initform '())))

(defun file->bit-reader (filename)
  (make-instance 'bit-reader :bits (file->bits filename)))

(defmethod read-bit ((bit-reader bit-reader))
  (pop (bit-reader-bits bit-reader)))
